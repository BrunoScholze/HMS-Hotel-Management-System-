/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnChanges, OnDestroy, OnInit, SimpleChanges, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { SchedulerComponent } from '../../scheduler.component';
import { SlotRange } from '../../types/slot-selection';
import * as i0 from "@angular/core";
/**
 * A directive which manages the in-memory selection state of the Scheduler slots
 * ([see example]({% slug slotselection_scheduler %}#toc-built-in-directive)).
 */
export declare class SlotSelectableDirective implements OnInit, OnChanges, OnDestroy {
    private scheduler;
    private cdr;
    /**
     * The currently selected slot range.
     */
    slotSelection: SlotRange;
    /**
     * Fires when the currently selected slot range has changed through user interaction.
     */
    slotSelectionChange: EventEmitter<SlotRange>;
    /**
     * @hidden
     * The resources of the cell where the selection started.
     * When dragging over the slots of a different resource in grouped mode, the ongoing selection will not be affected.
     */
    private selectionOriginResources;
    private selectedRange;
    private slotSelectionChangeSource;
    private subscriptions;
    constructor(scheduler: SchedulerComponent, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private isSlotSelected;
    private initDragSelect;
    private onDrag;
    private onRelease;
    /**
     * @hidden
     * Checks if the selected range contains a local date range.
     */
    private isInRange;
    static ɵfac: i0.ɵɵFactoryDeclaration<SlotSelectableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SlotSelectableDirective, "[kendoSchedulerSlotSelectable]", never, { "slotSelection": "slotSelection"; }, { "slotSelectionChange": "slotSelectionChange"; }, never, never, true, never>;
}
