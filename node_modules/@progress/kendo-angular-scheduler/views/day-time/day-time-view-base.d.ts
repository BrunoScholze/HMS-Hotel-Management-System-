/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ConfigurationViewBase } from '../common/configuration-view-base';
import { TimeSlotTemplateDirective, DateHeaderTemplateDirective, MajorTimeHeaderTemplateDirective, MinorTimeHeaderTemplateDirective } from '../templates';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { CurrentTimeSettings, OngoingEventsSettings } from '../../types';
import { Day } from '@progress/kendo-date-math';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare abstract class DayTimeViewBase extends ConfigurationViewBase implements OnDestroy {
    /**
     * @hidden
     */
    timeSlotTemplate: TimeSlotTemplateDirective;
    /**
     * @hidden
     */
    dateHeaderTemplate: DateHeaderTemplateDirective;
    /**
     * @hidden
      */
    majorTimeHeaderTemplate: MajorTimeHeaderTemplateDirective;
    /**
     * @hidden
     */
    minorTimeHeaderTemplate: MinorTimeHeaderTemplateDirective;
    /**
     * If set to `true`, the view will be initially shown in the business-hours mode.
     * By default, the view is displayed in the full-day mode.
     * @default false
     */
    showWorkHours: boolean;
    /**
     * Specifies whether to display the footer of the Scheduler.
     */
    showFooter: boolean;
    /**
     * The height of the events.
     */
    eventHeight: number;
    /**
     * The start time of the view. The Scheduler displays events which start after the start time.
     * Accepts string values in the `HH:mm` format.
     */
    startTime: string;
    /**
     * The time to which the view will initially be scrolled.
     * Accepts string values in the `HH:mm` format or a JavaScript `Date`.
     */
    scrollTime: string;
    /**
     * The end time of the view. The Scheduler displays events which end before the end time.
     * Accepts string values in the `HH:mm` format.
     */
    endTime: string;
    /**
     * The start time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayStart: string;
    /**
     * The end time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayEnd: string;
    /**
     * The start of the work week.
     */
    workWeekStart: Day;
    /**
     * The end of the work week.
     */
    workWeekEnd: Day;
    /**
     * The duration (in minutes) of the time slots.
     */
    slotDuration: number;
    /**
     * The number of divisions of the time slots.
     */
    slotDivisions: number;
    /**
     * Specifies the settings for the current time marker of the Scheduler.
     */
    currentTimeMarker: boolean | CurrentTimeSettings;
    /**
     * Specifies the settings for the ongoing events highlight of the Scheduler.
     */
    highlightOngoingEvents: boolean | OngoingEventsSettings;
    /**
     * @hidden
     */
    get viewEventHeight(): any;
    /**
     * @hidden
     */
    get shouldShowWorkHours(): boolean;
    /**
     * @hidden
     */
    get viewStartTime(): any;
    /**
     * @hidden
     */
    get viewEndTime(): any;
    /**
     * @hidden
     */
    get viewWorkDayStart(): any;
    /**
     * @hidden
     */
    get viewWorkDayEnd(): any;
    /**
     * @hidden
     */
    get viewWorkWeekStart(): any;
    /**
     * @hidden
     */
    get viewWorkWeekEnd(): any;
    /**
     * @hidden
     */
    get viewSlotDuration(): any;
    /**
     * @hidden
     */
    get viewSlotDivisions(): any;
    /**
     * @hidden
     */
    get viewCurrentTimeMarker(): any;
    /**
     * @hidden
     */
    get viewHighlightOngoingEvents(): any;
    /**
     * @hidden
     */
    get viewScrollTime(): any;
    /**
     * @hidden
     */
    get viewShowFooter(): boolean;
    constructor(localization: LocalizationService, changeDetector: ChangeDetectorRef, viewContext: ViewContextService, viewState: ViewStateService);
    protected optionValue(name: string): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<DayTimeViewBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DayTimeViewBase, never, never, { "showWorkHours": "showWorkHours"; "showFooter": "showFooter"; "eventHeight": "eventHeight"; "startTime": "startTime"; "scrollTime": "scrollTime"; "endTime": "endTime"; "workDayStart": "workDayStart"; "workDayEnd": "workDayEnd"; "workWeekStart": "workWeekStart"; "workWeekEnd": "workWeekEnd"; "slotDuration": "slotDuration"; "slotDivisions": "slotDivisions"; "currentTimeMarker": "currentTimeMarker"; "highlightOngoingEvents": "highlightOngoingEvents"; }, {}, ["timeSlotTemplate", "dateHeaderTemplate", "majorTimeHeaderTemplate", "minorTimeHeaderTemplate"], never, false, never>;
}
