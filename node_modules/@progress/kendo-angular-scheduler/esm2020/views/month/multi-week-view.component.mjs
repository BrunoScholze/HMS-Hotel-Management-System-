/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, ContentChild, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { IntlService } from '@progress/kendo-angular-intl';
import { addDays, addWeeks, firstDayInWeek, getDate } from '@progress/kendo-date-math';
import { SchedulerView } from '../../types';
import { ConfigurationViewBase } from '../common/configuration-view-base';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { MultiWeekDaySlotTemplateDirective } from '../templates';
import { DAYS_IN_WEEK_COUNT, DEFAULT_EVENT_HEIGHT, WEEKS_COUNT } from '../constants';
import { isPresent } from '../../common/util';
import { MonthViewRendererComponent } from './month-view-renderer.component';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
import * as i2 from "../view-context.service";
import * as i3 from "../view-state.service";
import * as i4 from "@progress/kendo-angular-intl";
/**
 * The component for rendering the **Multi-Week** view.
 */
export class MultiWeekViewComponent extends ConfigurationViewBase {
    constructor(localization, changeDetector, viewContext, viewState, intl) {
        super(localization, changeDetector, viewContext, viewState);
        this.intl = intl;
        /**
         * The number of weeks to be rendered.
         * @default 6
         */
        this.numberOfWeeks = WEEKS_COUNT;
        /**
         * The long-date format for displaying the
         * selected date in the Scheduler toolbar.
         * ([more information]({% slug parsingandformatting_intl %}#toc-date-formatting)).
         * @default '{0:D} - {1:D}'
         */
        this.selectedDateFormat = '{0:D} - {1:D}';
        /**
         * The short-date format for displaying the
         * selected date in the Scheduler toolbar.
         * ([more information]({% slug parsingandformatting_intl %}#toc-date-formatting.
         * @default '{0:d} - {1:d}'
         */
        this.selectedShortDateFormat = '{0:d} - {1:d}';
        /**
         * The invariant name for this view (`multiWeek`).
         */
        this.name = 'multiWeek';
    }
    /**
     * @hidden
     */
    get title() {
        return this.localization.get('multiWeekViewTitle');
    }
    get viewEventHeight() {
        return isPresent(this.eventHeight) ? this.eventHeight : (this.schedulerOptions.eventHeight || DEFAULT_EVENT_HEIGHT);
    }
    /**
     * @hidden
     */
    dateRange(date, weekStart) {
        const periodStart = getDate(date);
        const start = firstDayInWeek(periodStart, weekStart);
        const end = addDays(start, (DAYS_IN_WEEK_COUNT * this.numberOfWeeks));
        const text = this.intl.format(this.selectedDateFormat, start, end);
        const shortText = this.intl.format(this.selectedShortDateFormat, start, end);
        return { start, end, text, shortText };
    }
    /**
     * @hidden
     */
    newRange(date, direction = 1) {
        return firstDayInWeek(addWeeks(date, this.numberOfWeeks * direction));
    }
}
MultiWeekViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MultiWeekViewComponent, deps: [{ token: i1.LocalizationService }, { token: i0.ChangeDetectorRef }, { token: i2.ViewContextService }, { token: i3.ViewStateService }, { token: i4.IntlService }], target: i0.ɵɵFactoryTarget.Component });
MultiWeekViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: MultiWeekViewComponent, isStandalone: true, selector: "kendo-scheduler-multi-week-view", inputs: { eventHeight: "eventHeight", numberOfWeeks: "numberOfWeeks", selectedDateFormat: "selectedDateFormat", selectedShortDateFormat: "selectedShortDateFormat" }, providers: [{
            provide: SchedulerView,
            useExisting: forwardRef(() => MultiWeekViewComponent)
        }], queries: [{ propertyName: "multiWeekDaySlotTemplate", first: true, predicate: MultiWeekDaySlotTemplateDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #content>
            <month-view
                type="multiWeek"
                [eventHeight]="viewEventHeight"
                [eventTemplate]="eventTemplate?.templateRef"
                [slotClass]="viewSlotClass"
                [eventClass]="viewEventClass"
                [eventStyles]="viewEventStyles"
                [groupHeaderTemplate]="groupHeaderTemplate?.templateRef"
                [monthDaySlotTemplate]="multiWeekDaySlotTemplate?.templateRef"
                [selectedDateFormat]="selectedDateFormat"
                [selectedShortDateFormat]="selectedShortDateFormat"
                [highlightOngoingEvents]="viewHighlightOngoingEvents"
                [weekStart]="viewWeekStart"
                [numberOfWeeks]="numberOfWeeks"
                [dateRangeFn]="dateRange"
                [newRange]="newRange">
            </month-view>
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "component", type: MonthViewRendererComponent, selector: "month-view", inputs: ["monthDaySlotTemplate", "highlightOngoingEvents", "type", "numberOfWeeks", "newRange", "dateRangeFn"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MultiWeekViewComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-scheduler-multi-week-view',
                    providers: [{
                            provide: SchedulerView,
                            useExisting: forwardRef(() => MultiWeekViewComponent)
                        }],
                    template: `
        <ng-template #content>
            <month-view
                type="multiWeek"
                [eventHeight]="viewEventHeight"
                [eventTemplate]="eventTemplate?.templateRef"
                [slotClass]="viewSlotClass"
                [eventClass]="viewEventClass"
                [eventStyles]="viewEventStyles"
                [groupHeaderTemplate]="groupHeaderTemplate?.templateRef"
                [monthDaySlotTemplate]="multiWeekDaySlotTemplate?.templateRef"
                [selectedDateFormat]="selectedDateFormat"
                [selectedShortDateFormat]="selectedShortDateFormat"
                [highlightOngoingEvents]="viewHighlightOngoingEvents"
                [weekStart]="viewWeekStart"
                [numberOfWeeks]="numberOfWeeks"
                [dateRangeFn]="dateRange"
                [newRange]="newRange">
            </month-view>
        </ng-template>
    `,
                    standalone: true,
                    imports: [MonthViewRendererComponent]
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }, { type: i0.ChangeDetectorRef }, { type: i2.ViewContextService }, { type: i3.ViewStateService }, { type: i4.IntlService }]; }, propDecorators: { eventHeight: [{
                type: Input
            }], numberOfWeeks: [{
                type: Input
            }], selectedDateFormat: [{
                type: Input
            }], selectedShortDateFormat: [{
                type: Input
            }], multiWeekDaySlotTemplate: [{
                type: ContentChild,
                args: [MultiWeekDaySlotTemplateDirective]
            }] } });
