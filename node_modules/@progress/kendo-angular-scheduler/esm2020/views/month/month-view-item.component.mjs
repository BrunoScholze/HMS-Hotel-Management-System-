/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, ElementRef, Renderer2, Inject, LOCALE_ID } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { MonthSlotService } from './month-slot.service';
import { BaseViewItem } from '../view-items/base-view-item';
import { FocusService } from '../../navigation';
import { arrowRotateCwIcon, arrowsNoRepeatIcon, caretAltLeftIcon, caretAltRightIcon, xIcon } from '@progress/kendo-svg-icons';
import { IconWrapperComponent } from '@progress/kendo-angular-icons';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./month-slot.service";
import * as i2 from "@progress/kendo-angular-l10n";
import * as i3 from "../../navigation";
/**
 * @hidden
 */
export class MonthViewItemComponent extends BaseViewItem {
    constructor(slotService, localization, focusService, element, renderer, localeId) {
        super(slotService, localization, focusService, element, renderer, localeId);
        this.localeId = localeId;
        this.caretAltLeftIcon = caretAltLeftIcon;
        this.caretAltRightIcon = caretAltRightIcon;
        this.arrowRotateCwIcon = arrowRotateCwIcon;
        this.arrowsNoRepeatIcon = arrowsNoRepeatIcon;
        this.xIcon = xIcon;
    }
    reflow() {
        if (this.item.data[this.resourceIndex].hidden) {
            this.toggle(false);
            return;
        }
        else {
            this.toggle(true);
        }
        super.reflow();
    }
}
MonthViewItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MonthViewItemComponent, deps: [{ token: i1.MonthSlotService }, { token: i2.LocalizationService }, { token: i3.FocusService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
MonthViewItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: MonthViewItemComponent, isStandalone: true, selector: "[monthViewItem]", usesInheritance: true, ngImport: i0, template: `
        <span class="k-event-actions">
            <kendo-icon-wrapper
                *ngIf="item.tail"
                [name]="arrowIcons[0]"
                [svgIcon]="arrowSVGIcons[0]"
                >
            </kendo-icon-wrapper>
            <kendo-icon-wrapper
                *ngIf="isRecurrence"
                name="arrow-rotate-cw"
                [svgIcon]="arrowRotateCwIcon"
                >
            </kendo-icon-wrapper>
            <kendo-icon-wrapper
                *ngIf="isRecurrenceException"
                name="arrows-no-repeat"
                [svgIcon]="arrowsNoRepeatIcon"
                >
            </kendo-icon-wrapper>
        </span>
        <ng-container *ngIf="eventTemplate" [ngTemplateOutlet]="eventTemplate"
            [ngTemplateOutletContext]="{ $implicit: item.event, event: item.event, resources: resources }">
        </ng-container>
        <div *ngIf="!eventTemplate" [attr.title]="eventTitle">
            <div class="k-event-template">{{ item.event.title }}</div>
        </div>

        <span class="k-event-actions">
            <span *ngIf="removable" class="k-link k-event-delete" aria-hidden="true" [attr.title]="deleteMessage">
                <kendo-icon-wrapper name="x" [svgIcon]="xIcon"></kendo-icon-wrapper>
            </span>
            <kendo-icon-wrapper
                *ngIf="item.head"
                [name]="arrowIcons[1]"
                [svgIcon]="arrowSVGIcons[1]"
                >
            </kendo-icon-wrapper>
        </span>

        <ng-container *ngIf="resizable">
            <span class="k-resize-handle k-resize-w"></span>
            <span class="k-resize-handle k-resize-e"></span>
        </ng-container>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: ["name", "svgIcon", "innerCssClass", "customFontClass", "size"], exportAs: ["kendoIconWrapper"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MonthViewItemComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[monthViewItem]',
                    template: `
        <span class="k-event-actions">
            <kendo-icon-wrapper
                *ngIf="item.tail"
                [name]="arrowIcons[0]"
                [svgIcon]="arrowSVGIcons[0]"
                >
            </kendo-icon-wrapper>
            <kendo-icon-wrapper
                *ngIf="isRecurrence"
                name="arrow-rotate-cw"
                [svgIcon]="arrowRotateCwIcon"
                >
            </kendo-icon-wrapper>
            <kendo-icon-wrapper
                *ngIf="isRecurrenceException"
                name="arrows-no-repeat"
                [svgIcon]="arrowsNoRepeatIcon"
                >
            </kendo-icon-wrapper>
        </span>
        <ng-container *ngIf="eventTemplate" [ngTemplateOutlet]="eventTemplate"
            [ngTemplateOutletContext]="{ $implicit: item.event, event: item.event, resources: resources }">
        </ng-container>
        <div *ngIf="!eventTemplate" [attr.title]="eventTitle">
            <div class="k-event-template">{{ item.event.title }}</div>
        </div>

        <span class="k-event-actions">
            <span *ngIf="removable" class="k-link k-event-delete" aria-hidden="true" [attr.title]="deleteMessage">
                <kendo-icon-wrapper name="x" [svgIcon]="xIcon"></kendo-icon-wrapper>
            </span>
            <kendo-icon-wrapper
                *ngIf="item.head"
                [name]="arrowIcons[1]"
                [svgIcon]="arrowSVGIcons[1]"
                >
            </kendo-icon-wrapper>
        </span>

        <ng-container *ngIf="resizable">
            <span class="k-resize-handle k-resize-w"></span>
            <span class="k-resize-handle k-resize-e"></span>
        </ng-container>
    `,
                    standalone: true,
                    imports: [NgIf, IconWrapperComponent, NgTemplateOutlet]
                }]
        }], ctorParameters: function () { return [{ type: i1.MonthSlotService }, { type: i2.LocalizationService }, { type: i3.FocusService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
