/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter } from '@angular/core';
import { Resource } from '../types/resource.interface';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare abstract class ResourceEditorBase implements ControlValueAccessor {
    resource: Resource;
    valueChange: EventEmitter<any>;
    resourceValue: any;
    getField: any;
    abstract focus(): void;
    /**
     * @hidden
     */
    writeValue(newValue: any): void;
    getResourceStyle(dataItem: any): any;
    onResourceValueChange(newValue: any): void;
    protected onTouchedCallback: Function;
    protected onChangeCallback: Function;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    protected emitChange(value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResourceEditorBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ResourceEditorBase, never, never, { "resource": "resource"; }, { "valueChange": "valueChange"; }, never, never, false, never>;
}
