/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, OnInit, Renderer2 } from '@angular/core';
import { FocusableContainer } from '../types/focusable-container';
import { FocusService } from './focus.service';
import { FocusableElement } from './focusable-element.interface';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class FocusableDirective implements FocusableElement, OnInit {
    element: ElementRef;
    private renderer;
    private focusService;
    /**
     * The order of the element with respect to the other focusable elements.
     * If multiple elements share the same value, their relative to each other order follows their position in the component tree.
     */
    focusIndex: number;
    containerType: FocusableContainer;
    private get visible();
    private get enabled();
    private active;
    constructor(element: ElementRef, renderer: Renderer2, focusService: FocusService);
    ngAfterViewChecked(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggle(active: boolean): void;
    canFocus(): boolean;
    focus(): void;
    toggleFocus(value: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FocusableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FocusableDirective, "[kendoSchedulerFocusIndex]", never, { "focusIndex": "kendoSchedulerFocusIndex"; "containerType": "containerType"; }, {}, never, never, true, never>;
}
