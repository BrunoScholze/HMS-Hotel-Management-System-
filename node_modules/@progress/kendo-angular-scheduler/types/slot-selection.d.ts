/**-----------------------------------------------------------------------------------------
* Copyright Â© 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
/**
 * @hidden
 *
 * A callback that executes for each visible slot of the Scheduler component.
 * If it returns `true`, the `k-selected` CSS class will be added to the cell, making it visibly selected.
 */
export declare type SlotSelectionCallback = (args: IsSlotSelectedArgs) => boolean;
/**
 * The arguments for the [`isSlotSelected`]({% slug api_scheduler_schedulercomponent %}#toc-isslotselected) callback.
 */
export declare class IsSlotSelectedArgs implements SlotRange {
    /**
     * The start date of the slot.
     */
    start: Date;
    /**
     * The end date of the slot.
     */
    end: Date;
    /**
     * Indicates if the slot is an all-day slot, or a time slot.
     */
    isAllDay: boolean;
    /**
     * The resources for the slot, if grouping by resource; otherwise all Scheduler resources.
     */
    resources: any[];
}
/**
 * Defines a range of regular or all-day slots.
 * Used to describe the selected slots in the [`slotSelectionChange`](slug:api_scheduler_slotselectabledirective#toc-slotselectionchange) event and to set the selected slots with the [`kendoSchedulerSlotSelectable`]({% slug api_scheduler_slotselectabledirective %}) directive.
 */
export interface SlotRange {
    /**
     * The start date of the slot selection.
     */
    start: Date;
    /**
     * The end date of the slot selection.
     */
    end: Date;
    /**
     * Indicates if the slot selection consists of all-day slots, or of time slots.
     * The default value is `false`.
     */
    isAllDay?: boolean;
    /**
     * The resources that correspond to the slot selection.
     * The default value is `[]`.
     */
    resources?: any[];
}
/**
 * @hidden
 */
export interface ExtendedSlotRange extends SlotRange {
    originalEvent: PointerEvent;
}
/**
 * @hidden
 */
export declare enum slotDragEventName {
    initDragSelect = "initDragSelect",
    dragSelect = "dragSelect",
    refreshSlotSelection = "refreshSlotSelection",
    dragSelectRelease = "dragSelectRelease"
}
