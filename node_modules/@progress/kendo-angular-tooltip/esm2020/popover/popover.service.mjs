/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Injectable, NgZone } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject, Subscription } from 'rxjs';
import { auditTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class PopoverService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this._pointerOverPopup = new BehaviorSubject(null);
        this._pointerOverAnchor = new BehaviorSubject(null);
        this._focusInsidePopover = new BehaviorSubject(null);
        this._hidePopover = new Subject();
        this.subs = new Subscription();
        this.monitor();
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get isPopoverHovered() {
        return this._pointerOverPopup.asObservable();
    }
    emitPopoverState(isHovered) {
        this.ngZone.run(_ => this._pointerOverPopup.next(isHovered));
    }
    get isAnchorHovered() {
        return this._pointerOverAnchor.asObservable();
    }
    emitAnchorState(isHovered, anchor) {
        this._isOrigin = this.originAnchor === anchor;
        this.currentAnchor = anchor;
        if (isHovered) {
            this.originAnchor = anchor;
        }
        this.ngZone.run(_ => this._pointerOverAnchor.next(isHovered));
    }
    get isFocusInsidePopover() {
        return this._focusInsidePopover.asObservable();
    }
    emitFocusInsidePopover(isFocused) {
        this.ngZone.run(_ => this._focusInsidePopover.next(isFocused));
        this._focusInsidePopover.next(null);
    }
    get hidePopover() {
        return this._hidePopover.asObservable();
    }
    monitor() {
        this.subs.add(combineLatest(this.isPopoverHovered, this.isAnchorHovered).pipe(
        // `auditTime` is used because the `mouseleave` event is emitted before `mouseenter`
        // i.e. there is a millisecond in which the pointer leaves the first target (e.g. anchor) and hasn't reached the second one (e.g. popup)
        // resulting in both observables emitting `false`
        auditTime(20)).subscribe(val => {
            const [isPopoverHovered, isAnchorHovered] = val;
            this._hidePopover.next([isPopoverHovered, isAnchorHovered, this._isOrigin, this.currentAnchor]);
        }));
    }
}
PopoverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PopoverService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
PopoverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PopoverService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PopoverService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
